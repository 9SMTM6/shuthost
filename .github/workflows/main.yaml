name: Build All Targets

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-agents:
    name: Build agent for ${{ matrix.target }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-apple-darwin
            runner: macos-latest
          - target: x86_64-apple-darwin
            runner: macos-latest
          - target: x86_64-unknown-linux-gnu
            runner: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            runner: ubuntu-24.04-arm
          - target: x86_64-unknown-linux-musl
            runner: ubuntu-latest
          - target: aarch64-unknown-linux-musl
            runner: ubuntu-24.04-arm

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Install dependencies for MUSL targets
        if: contains(matrix.target, 'musl')
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Build agent
        run: |
          cargo fetch
          if [[ "${{ matrix.linker }}" != "" ]]; then
            export CARGO_TARGET_$(echo ${{ matrix.target }} | tr a-z A-Z | tr '-' '_' )_LINKER=${{ matrix.linker }}
          fi
          cargo build --release --bin shuthost_agent --target ${{ matrix.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: agent-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/shuthost_agent

  build-controllers:
    name: Build Controller for ${{ matrix.target }}
    needs: build-matrix
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-apple-darwin
            runner: macos-latest
          - target: x86_64-apple-darwin
            runner: macos-latest
          - target: x86_64-unknown-linux-gnu
            runner: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            runner: ubuntu-24.04-arm
          - target: x86_64-unknown-linux-musl
            runner: ubuntu-latest
          - target: aarch64-unknown-linux-musl
            runner: ubuntu-24.04-arm

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Install dependencies for MUSL targets
        if: contains(matrix.target, 'musl')
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Download all agent binaries
        uses: actions/download-artifact@v4
        with:
          path: ./target

      - name: Rehydrate target directory structure
        run: |
          mkdir -p target
          find ./target -name shuthost_agent -exec bash -c '
            for path; do
              dir=$(dirname "${path#./target/agent-}")
              mkdir -p "target/$dir/release"
              cp "$path" "target/$dir/release/"
            done
          ' bash {} +

      - name: Build controller
        run: |
          if [[ "${{ matrix.linker }}" != "" ]]; then
            export CARGO_TARGET_$(echo ${{ matrix.target }} | tr a-z A-Z | tr '-' '_' )_LINKER=${{ matrix.linker }}
          fi
          cargo build --release --bin shuthost_controller --target ${{ matrix.target }}

      - name: Upload controller binary
        uses: actions/upload-artifact@v4
        with:
          name: controller-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/shuthost_controller

  container-build:
    name: Build & Push Alpine Containers
    needs:
      - build-controllers
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download MUSL controller binaries
        uses: actions/download-artifact@v4
        with:
          path: ./target

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set lowercase repository name
        id: repo
        run: |
          echo "repo_lowercase=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT

      - name: Rehydrate target directory structure
        run: |
          mkdir -p target
          find ./target -name shuthost_controller -exec bash -c '
            for path; do
              dir=$(dirname "${path#./target/shuthost_controller-}")
              mkdir -p "target/$dir/release"
              cp "$path" "target/$dir/release/"
            done
          ' bash {} +

      - name: Build & Push Multi-Arch Alpine Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Containerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ steps.repo.outputs.repo_lowercase }}/shuthost-controller:latest
            ghcr.io/${{ steps.repo.outputs.repo_lowercase }}/shuthost-controller:${{ github.sha }}
          build-args: |
            TARGET=x86_64-unknown-linux-musl
            TARGET=aarch64-unknown-linux-musl

  release:
    name: Upload Release Binaries
    needs:
      - build-controllers
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download all controller binaries
        uses: actions/download-artifact@v4
        with:
          path: ./release-assets

      - name: Fetch full git history and tags
        run: |
          git fetch --tags --force

      - name: Get latest Git tag
        id: get_tag
        run: |
          TAG=$(git describe --tags --abbrev=0)
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          name: "Release ${{ steps.get_tag.outputs.tag }}"
          files: ./release-assets/**/*.shuthost_controller
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
