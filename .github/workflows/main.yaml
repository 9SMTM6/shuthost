name: Build All Targets
permissions:
  contents: read

on:
  push:
    branches: [main]
    tags: ['*']
  pull_request:
    branches: [main]

jobs:
  build-node_agents:
    name: Build node_agent for ${{ matrix.target }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-apple-darwin
            runner: macos-latest
          - target: x86_64-apple-darwin
            runner: macos-latest
          - target: x86_64-unknown-linux-gnu
            runner: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            runner: ubuntu-24.04-arm
          - target: x86_64-unknown-linux-musl
            runner: ubuntu-latest
          - target: aarch64-unknown-linux-musl
            runner: ubuntu-24.04-arm

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Install dependencies for MUSL targets
        if: contains(matrix.target, 'musl')
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Build node_agent
        run: |
          cargo fetch
          if [[ "${{ matrix.linker }}" != "" ]]; then
            export CARGO_TARGET_$(echo ${{ matrix.target }} | tr a-z A-Z | tr '-' '_' )_LINKER=${{ matrix.linker }}
          fi
          cargo build --release --bin shuthost_node_agent --target ${{ matrix.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: node_agent-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/shuthost_node_agent

  build-coordinators:
    name: Build Controller for ${{ matrix.target }}
    needs: build-node_agents
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-apple-darwin
            runner: macos-latest
          - target: x86_64-apple-darwin
            runner: macos-latest
          - target: x86_64-unknown-linux-gnu
            runner: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            runner: ubuntu-24.04-arm
          - target: x86_64-unknown-linux-musl
            runner: ubuntu-latest
          - target: aarch64-unknown-linux-musl
            runner: ubuntu-24.04-arm

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Install dependencies for MUSL targets
        if: contains(matrix.target, 'musl')
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Download all node_agent binaries
        uses: actions/download-artifact@v4
        with:
          path: ./target

      - name: Rehydrate target directory structure
        run: |
          mkdir -p target
          find ./target -name shuthost_node_agent -exec bash -c '
            for path; do
              dir=$(dirname "${path#./target/node_agent-}")
              mkdir -p "target/$dir/release"
              cp "$path" "target/$dir/release/"
            done
          ' bash {} +

      - name: Build coordinator
        run: |
          if [[ "${{ matrix.linker }}" != "" ]]; then
            export CARGO_TARGET_$(echo ${{ matrix.target }} | tr a-z A-Z | tr '-' '_' )_LINKER=${{ matrix.linker }}
          fi
          cargo build --release --bin shuthost_coordinator --target ${{ matrix.target }}

      - name: Upload coordinator binary
        uses: actions/upload-artifact@v4
        with:
          name: coordinator-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/shuthost_coordinator

  container-build:
    name: Build & Push Alpine Containers
    needs:
      - build-coordinators
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Download MUSL coordinator binaries
        uses: actions/download-artifact@v4
        with:
          path: ./rehydrated

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set lowercase repository name
        id: repo
        run: |
          echo "repo_lowercase=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT

      - name: Rehydrate target directory structure
        run: |
          mkdir -p target
          for dir in ./rehydrated/coordinator-*; do
            target=$(basename "$dir" | sed 's/^coordinator-//')
            mkdir -p "target/$target/release"
            cp "$dir/shuthost_coordinator" "target/$target/release/"
          done

      - name: Build & Push Multi-Arch Alpine Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Containerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ steps.repo.outputs.repo_lowercase }}/shuthost-coordinator:${{ github.sha }}
            ${{ startsWith(github.ref, 'refs/tags/') && format('ghcr.io/{0}/shuthost-coordinator:latest', steps.repo.outputs.repo_lowercase) || '' }}
          build-args: |
            TARGET=x86_64-unknown-linux-musl
            TARGET=aarch64-unknown-linux-musl

  test-installation:
    name: Test Service Installation & Startup
    runs-on: ${{ matrix.runner }}
    needs: [build-node_agents, build-coordinators]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            runner: ubuntu-latest
            init: systemd
            docker_image: docker.io/heywoodlh/systemd:latest
            binary_target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            runner: ubuntu-latest
            init: openrc
            docker_image: docker.io/heywoodlh/openrc:latest
            binary_target: x86_64-unknown-linux-musl
          # disabled for now, could not find a slackware image with that init system. Maybe considering the issues, and that I have to retrofit unraid anyways, I just drop slackware style support, and instead make an initless installation script.
          # - os: ubuntu-latest
          #   runner: ubuntu-latest
          #   init: sysvinit
          #   docker_image: docker.io/vbatts/slackware:latest
          #   # even latest slackware has age old glibc, thus use musl target instead.
          #   # TODO: document this issue!
          #   binary_target: x86_64-unknown-linux-musl
          - os: macos-latest
            runner: macos-latest
            init: launchd
            binary_target: aarch64-apple-darwin

    steps:
      - uses: actions/checkout@v4

      - name: Download coordinator binary
        uses: actions/download-artifact@v4
        with:
          name: coordinator-${{ matrix.binary_target }}

      - run: chmod +x shuthost_coordinator

      - name: Test on Linux (systemd/openrc/sysvinit)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          if [ "${{ matrix.init }}" = "systemd" ]; then
            # systemd: use default entrypoint, no command
            docker run --privileged --rm -d --name testinit -v $PWD/target:/binaries -v $PWD:/repo ${{ matrix.docker_image }}
          elif [ "${{ matrix.init }}" = "openrc" ]; then
            # openrc: start with /sbin/init, then run openrc boot
            docker run --privileged --rm -d --name testinit -v $PWD/target:/binaries -v $PWD:/repo ${{ matrix.docker_image }} /sbin/init
          elif [ "${{ matrix.init }}" = "sysvinit" ]; then
            # sysvinit/slackware: start with /bin/bash
            docker run --privileged --rm -d --name testinit -v $PWD/target:/binaries -v $PWD:/repo ${{ matrix.docker_image }} /bin/bash -c "while true; do sleep 60; done"
          fi

          # Install dependencies
          if [ "${{ matrix.init }}" = "systemd" ]; then
            docker exec testinit bash -c "apt-get update && apt-get install -y curl sudo"
          elif [ "${{ matrix.init }}" = "openrc" ]; then
            docker exec testinit sh -c "apk add curl sudo openrc"
            docker exec testinit openrc boot
          elif [ "${{ matrix.init }}" = "sysvinit" ]; then
            docker exec testinit bash -c "slackpkg update && slackpkg install curl sudo"
          fi

          # Copy controller binary
          docker cp ./shuthost_coordinator testinit:/

          # Install the coordinator as a service (it gets started automatically)
          docker exec testinit sh -c "./shuthost_coordinator install root --port 8080 --bind 127.0.0.1"

          # Wait for coordinator to be ready
          sleep 2

          # Run agent installer (downloads from running coordinator)
          curl -fsSL http://localhost:8080/download/node_agent_installer.sh | sh -s http://localhost:8080

          # Wait for agent to be ready
          sleep 2

          # Check on agent service according to init system
          if [ "${{ matrix.init }}" = "systemd" ]; then
            docker exec testinit systemctl status shuthost_node_agent
          elif [ "${{ matrix.init }}" = "openrc" ]; then
            docker exec testinit rc-service shuthost_node_agent status
          elif [ "${{ matrix.init }}" = "sysvinit" ]; then
            docker exec testinit /etc/init.d/shuthost_node_agent status
          fi

          # Check logs or process running
          docker exec testinit ps aux | grep shuthost_node_agent

          # Clean up
          docker stop testinit

      - name: Test on macOS (launchd)
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          sudo ./shuthost_coordinator install $(whoami) --port 8080 --bind 127.0.0.1
          sleep 2
          curl -fsSL http://localhost:8080/download/node_agent_installer.sh | sh -s http://localhost:8080
          sleep 2
          echo "passed"
          launchctl list | grep shuthost_node_agent

  release:
    name: Upload Release Binaries
    needs:
      - build-coordinators
    if: ${{ github.event_name == 'push' }}
    permissions:
      contents: write
    runs-on: ubuntu-latest

    steps:
      - name: Download all coordinator binaries
        uses: actions/download-artifact@v4
        with:
          pattern: coordinator-*
          path: ./release-assets
      
      - name: Prepare release assets directory
        run: |
          # Move coordinator binaries to a common directory with target-based binary names
          mkdir -p release-assets/flat
          for dir in release-assets/coordinator-*; do
            target=$(basename "$dir" | sed 's/^coordinator-//')
            if [ -f "$dir/shuthost_coordinator" ]; then
              cp "$dir/shuthost_coordinator" "release-assets/flat/shuthost_coordinator-$target"
            fi
          done

      - run: ls -la release-assets/

      - name: Create a valid release tag
        id: tag
        run: |
          string=${{ github.ref }};
          cleaned_string="${string#refs/tags/}";
          cleaned_string="${cleaned_string#refs/heads/}";
          echo "tag=$cleaned_string" >> $GITHUB_OUTPUT;

      - name: Upload binaries to release (create one if not existing)
        uses: softprops/action-gh-release@v2
        if: ${{ github.event_name == 'push' }}
        with:
          fail_on_unmatched_files: true
          files: ./release-assets/flat/*
          tag_name: ${{ steps.tag.outputs.tag }}
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
