on: [push, pull_request]

# These tests are considered irrelevant for a proper deployment, but sure are nice to have correct most of the time.
name: QualityAssurance

jobs:
  fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt
      - uses: Swatinem/rust-cache@v2
      - run: cargo +stable --locked fmt --all -- --check
  cargo-deny:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: EmbarkStudios/cargo-deny-action@v2
      with:
        rust-version: stable
  spell-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check spelling of entire workspace
        uses: crate-ci/typos@master
  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - run: cargo +stable clippy --workspace -- -D warnings

  # Issues: Doesn't track coverage from external processes in integration tests.
  # This is the only way my integration tests use the coordinator and agent, and thus integratio ntest coverage is pretty much not tracked
  # Meanwhile a lot of functions can only really be excercised in integration tests (if that suffices for them at all, e.g. install routines need different systems)

  # Potential fix: running coordinator and agent as library (inner_main).
  # But this requires modifications:
  #   * take arguments as method params instead of parsing in inner_main
  #   * spawn them with tokio::spawn, use the JoinHandle to kill.
  #     * this needs further changes to work properly in the coordinator: 
  #       * It spawns a bunch of its own tasks with tokio::spawn, thus they don't get properly cleaned up.
  #       * I may be able to get it working without that, but I kind of don't want to.
  # and thats just the issues I'm aware of.
  coverage:
    name: Coverage report (tarpaulin)
    runs-on: ubuntu-latest

    container:
      image: xd009642/tarpaulin
      options: --security-opt seccomp=unconfined

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install npm
        # Use the container's system repositories to install npm so build.rs can invoke it
        run: |
          apt-get update
          apt-get install -y npm

      - name: Run tarpaulin and capture output
        run: |
          cargo tarpaulin --workspace --verbose --out Json --out Html --out Stdout

      - name: Upload coverage artifacts (JSON + HTML)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            ./tarpaulin-report.html
            ./tarpaulin-report.json

